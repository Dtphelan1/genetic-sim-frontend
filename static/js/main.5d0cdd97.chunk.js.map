{"version":3,"sources":["GenSimAppBar.js","GenerationSlider.js","DataVis.js","FrequencyInput.js","GenotypeSimulatorApp.js","PunnetSquareSimulatorApp.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","GenSimAppBar","props","classes","apps","displayText","setCurrentApp","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","map","app","Button","key","onClick","width","GenerationSlider","value","setValue","type","min","max","step","rate","bias","scale","val","marks","label","console","log","id","gutterBottom","Grid","container","alignItems","item","xs","Slider","defaultValue","getAriaValueText","aria-labelledby","onChange","event","newValue","parseInt","valueLabelFormat","valueLabelDisplay","DataVis","data","JSON","stringify","defaultProps","FrequencyInput","isError","FormControl","Input","Number","target","endAdornment","InputAdornment","aria-describedby","error","inputProps","FormHelperText","freqInput","gridContainer","margin","gridElements","padding","host","AppLookup","GenotypeSimulator","populationVariant","hetero","homoD","homoR","safeguard","inputFn","isNaN","React","useState","setHetero","setHomoD","setHomoR","generations","setGenerations","conditionData","setConditionData","isSubmitDisabled","a","params","axios","get","Container","maxWidth","noValidate","autoComplete","Object","keys","ty","disabled","PunnetSquareSimulator","parentA","parentB","length","setParentA","setParentB","offspringData","setOffspringData","App","currentApp","CurrentApp","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5d0cdd97.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function GenSimAppBar(props) {\n  const classes = useStyles();\n  const { apps, displayText, setCurrentApp } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            SimGen\n          </Typography>\n          {apps.map((app) => (\n            <Button key={app} color=\"inherit\" onClick={() => setCurrentApp(app)}>{displayText[app]}</Button>\n          ))}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nGenSimAppBar.propTypes = {\n  apps: PropTypes.arrayOf(PropTypes.string).isRequired,\n  displayText: PropTypes.objectOf(PropTypes.string).isRequired,\n  setCurrentApp: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n  },\n});\n\n\nexport default function GenerationSlider(props) {\n  const classes = useStyles();\n  const {\n    value, setValue, type, title, min, max, step,\n  } = props;\n  // Some constants for scaling values from slider values 0-100 to relevant values\n  const rate = ((max - min) / 100);\n  const bias = min;\n  function scale(val) {\n    return (val * rate) + bias;\n  }\n  function normalize(val) {\n    return (val - bias) / rate;\n  }\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(scale(newValue));\n  };\n\n  function valueText(val) {\n    return `${scale(val)} Generations`;\n  }\n\n  function valueLabelFormat(val) {\n    return `${scale(val)}`;\n  }\n\n  const marks = [\n    {\n      value: 0,\n      label: `${min} Generations`,\n    },\n    {\n      value: 100,\n      label: `${max} Generations`,\n    },\n  ];\n  console.log('GenerationSlider -> parseInt((step / (max - min)) * 100, 10)', (step / (max - min)) * 100, 10);\n  console.log('GenerationSlider -> (max - min)', (max - min));\n  console.log('GenerationSlider -> step', step);\n\n  return (\n    <div className={classes.root}>\n      <Typography id={`${type}-slider-`} gutterBottom>\n        {title}\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs>\n          <Slider\n            defaultValue={0}\n            getAriaValueText={valueText}\n            aria-labelledby=\"discrete-slider-always\"\n            onChange={handleSliderChange}\n            step={parseInt((step / (max - min)) * 100, 10)}\n            marks={marks}\n            value={normalize(value)}\n            valueLabelFormat={valueLabelFormat}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\nGenerationSlider.propTypes = {\n  value: PropTypes.number.isRequired,\n  setValue: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  step: PropTypes.number,\n};\nGenerationSlider.defaultProps = {\n  min: 100,\n  max: 1100,\n  step: 100,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function DataVis(props) {\n  const { data } = props;\n  return (\n    <>\n      <p>\n        {JSON.stringify(data)}\n      </p>\n    </>\n  );\n}\n\nDataVis.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n});\n\nexport default function FrequencyInput(props) {\n  const classes = useStyles();\n  const {\n    value, setValue, type, title, isError,\n  } = props;\n\n  const handleInputChange = (event) => {\n    let newValue = Number(event.target.value);\n    if (newValue > 100) {\n      newValue = 100;\n    } else if (newValue < 0) {\n      newValue = 0;\n    }\n\n    setValue(newValue);\n  };\n\n  return (\n    // <TextField\n    //   className={classes.root}\n    //   id={type}\n    //   label={title}\n    //   value={value}\n    //   onChange={handleInputChange}\n    //   endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n    //   variant=\"filled\"\n    //   error={isError()}\n    //   margin=\"dense\"\n    // />\n    <FormControl className={classes.root}>\n      <Input\n        id={`${type}-frequency-standard-adornment`}\n        value={value}\n        onChange={handleInputChange}\n        endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n        aria-describedby={`${type}-frequency-input-helper-text`}\n        error={isError()}\n        inputProps={{\n          'aria-label': 'frequency',\n        }}\n      />\n      <FormHelperText id={`${type}-frequency-input-helper-text`}>{title}</FormHelperText>\n    </FormControl>\n  );\n}\nFrequencyInput.propTypes = {\n  value: PropTypes.number,\n  setValue: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  isError: PropTypes.func.isRequired,\n};\nFrequencyInput.defaultProps = {\n  value: 0,\n};\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios';\nimport GenerationSlider from './GenerationSlider';\nimport DataVis from './DataVis';\nimport FrequencyInput from './FrequencyInput';\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  freqInput: {\n    width: 250,\n  },\n  gridContainer: {\n    margin: theme.spacing(2),\n  },\n  gridElements: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst host = 'https://genetic-simulator.herokuapp.com/';\nconst path = 'runPopSim';\n\nexport default function GenotypeSimulatorApp() {\n  const classes = useStyles();\n  // Create state and lookup table for each type of population member\n  const populationVariant = {\n    hetero: {\n      title: 'Frequency of Heterozygous',\n    },\n    homoD: {\n      title: 'Frequency of Homozygous Dominant',\n    },\n    homoR: {\n      title: 'Frequency of Homozygous Recessive',\n    },\n  };\n\n  function safeguard(inputFn) {\n    return (value) => {\n      // If the value is a number, pass to the inputFN\n      if (!Number.isNaN(value)) {\n        return inputFn(value);\n      }\n      // Else return nothing\n      return undefined;\n    };\n  }\n\n  const [hetero, setHetero] = React.useState(33);\n  populationVariant.hetero.value = hetero;\n  populationVariant.hetero.setValue = safeguard(setHetero);\n  const [homoD, setHomoD] = React.useState(33);\n  populationVariant.homoD.value = homoD;\n  populationVariant.homoD.setValue = safeguard(setHomoD);\n  const [homoR, setHomoR] = React.useState(34);\n  populationVariant.homoR.value = homoR;\n  populationVariant.homoR.setValue = safeguard(setHomoR);\n  // Create state for the number of runs\n  const [generations, setGenerations] = useState(100);\n  // Create a place to store the resulting data\n  const [conditionData, setConditionData] = useState([]);\n\n  // Disable submit unless all percentages add to 100\n  function isSubmitDisabled() {\n    return !((hetero + homoD + homoR) === 100);\n  }\n\n  function buttonText() {\n    if (!isSubmitDisabled()) {\n      return 'Submit';\n    }\n    return 'Ensure Geneotype Percents Add to 100';\n  }\n\n  async function runSim() {\n    const params = {\n      hetero,\n      homoD,\n      homoR,\n      generations,\n    };\n    const data = await axios.get(host + path, {\n      params,\n    });\n    setConditionData(data.data);\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container className={classes.gridContainer}>\n        <Grid item xs={12}>\n          <Typography variant=\"h3\">\n            Genotype Frequencies\n          </Typography>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Decide what our population&apos;s initial genotypes frequencies are\n            and how many different generations to create to see what happens over time\n          </Typography>\n        </Grid>\n        <Grid item xs={6} className={classes.gridElements}>\n          <Typography variant=\"h5\" gutterBottom>\n            Input Parameters\n          </Typography>\n          <form noValidate autoComplete=\"off\">\n            {Object.keys(populationVariant).map((ty) => {\n              const { title, value, setValue } = populationVariant[ty];\n              return (\n                <Grid item key={ty} className={classes.freqInput}>\n                  <FrequencyInput\n                    type={ty}\n                    title={title}\n                    value={value}\n                    setValue={setValue}\n                    isError={isSubmitDisabled}\n                  />\n                </Grid>\n              );\n            })}\n            <GenerationSlider\n              type=\"generations\"\n              title=\"Number of Generations\"\n              value={generations}\n              setValue={setGenerations}\n            />\n            <Button variant=\"contained\" color=\"primary\" disabled={isSubmitDisabled()} onClick={runSim}>\n              {buttonText()}\n            </Button>\n          </form>\n        </Grid>\n        <Grid item xs={6} className={classes.gridElements}>\n          <Typography variant=\"h5\" gutterBottom>\n            Output Data\n          </Typography>\n          <DataVis\n            data={conditionData}\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios';\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport DataVis from './DataVis';\nimport GenerationSlider from './GenerationSlider';\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  freqInput: {\n    width: 250,\n  },\n  gridContainer: {\n    margin: theme.spacing(2),\n  },\n  gridElements: {\n    padding: theme.spacing(2),\n  },\n}));\n\nconst host = 'https://genetic-simulator.herokuapp.com/';\nconst path = 'runOffspringSim';\n\nexport default function PunnetSquareSimulatorApp() {\n  const classes = useStyles();\n  // Create state and lookup table for each type of population member\n  const populationVariant = {\n    parentA: {\n      title: 'Alleles for Parent A',\n    },\n    parentB: {\n      title: 'Alleles for Parent B',\n    },\n  };\n\n  function safeguard(inputFn) {\n    return (value) => {\n      // If the value is a number, pass to the inputFN\n      if (value.length <= 2) {\n        return inputFn(value);\n      }\n      // Else return nothing\n      return undefined;\n    };\n  }\n\n  const [parentA, setParentA] = React.useState('BB');\n  populationVariant.parentA.value = parentA;\n  populationVariant.parentA.setValue = safeguard(setParentA);\n  const [parentB, setParentB] = React.useState('Bb');\n  populationVariant.parentB.value = parentB;\n  populationVariant.parentB.setValue = safeguard(setParentB);\n  // Create state for the number of runs\n  const [generations, setGenerations] = useState(100);\n  // Create a place to store the resulting data\n  const [offspringData, setOffspringData] = useState({});\n\n  // Disable submit unless all percentages add to 100\n  function isSubmitDisabled() {\n    return (parentA.length !== 2 && parentB.length !== 2);\n  }\n\n  function buttonText() {\n    if (!isSubmitDisabled()) {\n      return 'Generate Offspring';\n    }\n    return 'Make sure your alleles are correct';\n  }\n\n  async function runSim() {\n    const params = {\n      parentA,\n      parentB,\n      generations,\n    };\n    const data = await axios.get(host + path, {\n      params,\n    });\n    setOffspringData(data.data);\n  }\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container className={classes.gridContainer}>\n        <Grid item xs={12}>\n          <Typography variant=\"h3\">\n            Punnet Square Simulator\n          </Typography>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Generate a bunch of offspring and see how the population metrics match up\n            with the punnett square predictions\n          </Typography>\n        </Grid>\n        <Grid item xs={6} className={classes.gridElements}>\n          <Typography variant=\"h5\" gutterBottom>\n            Input Parameters\n          </Typography>\n          <form noValidate autoComplete=\"off\">\n            {Object.keys(populationVariant).map((ty) => {\n              const { title, value, setValue } = populationVariant[ty];\n              return (\n                <Grid item key={ty} className={classes.freqInput}>\n                  <FormControl className={classes.root}>\n                    <Input\n                      id={`${ty}-input`}\n                      value={value}\n                      onChange={(event) => safeguard(setValue)(event.target.value)}\n                      aria-describedby={`${ty}-input-helper-text`}\n                      error={isSubmitDisabled()}\n                      inputProps={{\n                        'aria-label': 'frequency',\n                      }}\n                    />\n                    <FormHelperText id={`${ty}-input-helper-text`}>{title}</FormHelperText>\n                  </FormControl>\n                </Grid>\n              );\n            })}\n            <GenerationSlider\n              type=\"generations\"\n              title=\"Number of Generations\"\n              value={generations}\n              setValue={setGenerations}\n            />\n            <Button variant=\"contained\" color=\"primary\" disabled={isSubmitDisabled()} onClick={runSim}>\n              {buttonText()}\n            </Button>\n          </form>\n        </Grid>\n        <Grid item xs={6} className={classes.gridElements}>\n          <Typography variant=\"h5\" gutterBottom>\n            Output Data\n          </Typography>\n          <DataVis\n            data={offspringData}\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n","import React, { useState } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport GenSimAppBar from './GenSimAppBar';\nimport GenotypeSimulatorApp from './GenotypeSimulatorApp';\nimport PunnetSquareSimulatorApp from './PunnetSquareSimulatorApp';\nimport './App.css';\n\nconst AppLookup = {\n  GenotypeSimulator: GenotypeSimulatorApp,\n  PunnetSquareSimulator: PunnetSquareSimulatorApp,\n};\n\nconst displayText = {\n  GenotypeSimulator: 'Genotype Simulator',\n  PunnetSquareSimulator: 'Punnet Square Simulator',\n};\n\nfunction App() {\n  const [currentApp, setCurrentApp] = useState('GenotypeSimulator');\n\n  const CurrentApp = AppLookup[currentApp];\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <GenSimAppBar\n        apps={Object.keys(AppLookup)}\n        displayText={displayText}\n        setCurrentApp={setCurrentApp}\n      />\n      <CurrentApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}