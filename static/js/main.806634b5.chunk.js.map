{"version":3,"sources":["FrequencySlider.js","DataVis.js","FrequencyInput.js","GenSimAppBar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","width","input","scale","val","FrequencySlider","props","classes","value","setValue","type","title","marks","label","className","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","defaultValue","getAriaValueText","aria-labelledby","onChange","event","newValue","step","valueLabelFormat","valueLabelDisplay","DataVis","data","JSON","stringify","FrequencyInput","isError","FormControl","Input","Number","target","endAdornment","InputAdornment","position","aria-describedby","error","inputProps","FormHelperText","defaultProps","theme","flexGrow","menuButton","marginRight","GenSimAppBar","AppBar","Toolbar","IconButton","edge","color","aria-label","variant","Button","freqInput","gridContainer","margin","gridElements","padding","App","populationVariant","hetero","homoD","homoR","safeguard","inputFn","isNaN","React","useState","setHetero","setHomoD","setHomoR","generations","setGenerations","conditionData","setConditionData","isSubmitDisabled","a","params","axios","get","host","CssBaseline","Container","maxWidth","noValidate","autoComplete","Object","keys","map","ty","key","min","max","disabled","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.806634b5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 250,\n  },\n  input: {\n    width: 42,\n  },\n});\n\n// Some constants for scaling values from slider values 0-100 to relevant values\nconst min = 100;\nconst max = 500;\nconst step = 10;\nconst rate = ((max - min) / 100);\nconst bias = min;\nfunction scale(val) {\n  return (val * rate) + bias;\n}\nfunction normalize(val) {\n  return (val - bias) / rate;\n}\n\nexport default function FrequencySlider(props) {\n  const classes = useStyles();\n  const { value, setValue, type, title } = props;\n\n  const handleSliderChange = (event, newValue) => {\n    setValue(scale(newValue));\n  };\n\n  function valuetext(val) {\n    return `${scale(val)} Generations`;\n  }\n\n  function valueLabelFormat(val) {\n    return `${scale(val)}`;\n  }\n\n  const marks = [\n    {\n      value: 0,\n      label: `${min} Generations`,\n    },\n    {\n      value: 100,\n      label: `${max} Generations`,\n    },\n  ];\n\n  return (\n    <div className={classes.root}>\n      <Typography id={`${type}-slider-`} gutterBottom>\n        {title}\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs>\n          <Slider\n            defaultValue={0}\n            getAriaValueText={valuetext}\n            aria-labelledby=\"discrete-slider-always\"\n            onChange={handleSliderChange}\n            step={step}\n            marks={marks}\n            value={normalize(value)}\n            valueLabelFormat={valueLabelFormat}\n            valueLabelDisplay=\"on\"\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\nFrequencySlider.propTypes = {\n  value: PropTypes.number.isRequired,\n  setValue: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function DataVis(props) {\n  const { data } = props;\n  return (\n    <>\n      <p>\n        {JSON.stringify(data)}\n\n      </p>\n    </>\n  );\n}\n\nDataVis.propTypes = {\n  data: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n  },\n});\n\nexport default function FrequencyInput(props) {\n  const classes = useStyles();\n  const {\n    value, setValue, type, title, isError,\n  } = props;\n\n  const handleInputChange = (event) => {\n    let newValue = Number(event.target.value);\n    if (newValue > 100) {\n      newValue = 100;\n    } else if (newValue < 0) {\n      newValue = 0;\n    }\n\n    setValue(newValue);\n  };\n\n  return (\n    // <TextField\n    //   className={classes.root}\n    //   id={type}\n    //   label={title}\n    //   value={value}\n    //   onChange={handleInputChange}\n    //   endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n    //   variant=\"filled\"\n    //   error={isError()}\n    //   margin=\"dense\"\n    // />\n    <FormControl className={classes.root}>\n      <Input\n        id={`${type}-frequency-standard-adornment`}\n        value={value}\n        onChange={handleInputChange}\n        endAdornment={<InputAdornment position=\"end\">%</InputAdornment>}\n        aria-describedby={`${type}-frequency-input-helper-text`}\n        error={isError()}\n        inputProps={{\n          'aria-label': 'frequency',\n        }}\n      />\n      <FormHelperText id={`${type}-frequency-input-helper-text`}>{title}</FormHelperText>\n    </FormControl>\n  );\n}\nFrequencyInput.propTypes = {\n  value: PropTypes.number,\n  setValue: PropTypes.func.isRequired,\n  type: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  isError: PropTypes.func.isRequired,\n};\nFrequencyInput.defaultProps = {\n  value: 0,\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function GenSimAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            SimGen\n          </Typography>\n          <Button color=\"inherit\">Genotypes</Button>\n          <Button color=\"inherit\">Punnet Square</Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport axios from 'axios';\nimport FrequencySlider from './FrequencySlider';\nimport DataVis from './DataVis';\nimport FrequencyInput from './FrequencyInput';\nimport GenSimAppBar from './GenSimAppBar';\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  freqInput: {\n    width: 250,\n  },\n  gridContainer: {\n    margin: theme.spacing(2),\n  },\n  gridElements: {\n    padding: theme.spacing(2),\n  },\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n  // Create state and lookup table for each type of population member\n  const populationVariant = {\n    hetero: {\n      title: 'Frequency of Heterozygous',\n    },\n    homoD: {\n      title: 'Frequency of Homozygous Dominant',\n    },\n    homoR: {\n      title: 'Frequency of Homozygous Recessive',\n    },\n  };\n\n  function safeguard(inputFn) {\n    return (value) => {\n      // If the value is a number, pass to the inputFN\n      if (!Number.isNaN(value)) {\n        return inputFn(value);\n      }\n      // Else return nothing\n      return undefined;\n    };\n  }\n\n  const [hetero, setHetero] = React.useState(33);\n  populationVariant.hetero.value = hetero;\n  populationVariant.hetero.setValue = safeguard(setHetero);\n  const [homoD, setHomoD] = React.useState(33);\n  populationVariant.homoD.value = homoD;\n  populationVariant.homoD.setValue = safeguard(setHomoD);\n  const [homoR, setHomoR] = React.useState(34);\n  populationVariant.homoR.value = homoR;\n  populationVariant.homoR.setValue = safeguard(setHomoR);\n  // Create state for the number of runs\n  const [generations, setGenerations] = useState(100);\n  // Create a place to store the resulting data\n  const [conditionData, setConditionData] = useState({});\n\n  // Disable submit unless all percentages add to 100\n  function isSubmitDisabled() {\n    return !((hetero + homoD + homoR) === 100);\n  }\n\n  function buttonText() {\n    if (!isSubmitDisabled()) {\n      return 'Submit';\n    }\n    return 'Ensure Geneotype Percents Add to 100';\n  }\n\n  async function runSim() {\n    const params = {\n      hetero,\n      homoD,\n      homoR,\n      generations,\n    };\n    const host = 'http://127.0.0.1:5000/';\n    const path = 'runSim';\n    const data = await axios.get(host + path, {\n      params,\n    });\n    setConditionData(data.data);\n  }\n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <GenSimAppBar />\n      <Container maxWidth=\"lg\">\n        <Grid container className={classes.gridContainer}>\n          <Typography variant=\"h3\">\n            Genotype Frequencies\n          </Typography>\n          <Typography variant=\"subtitle1\" gutterBottom>\n            Decide what our population&apos;s initial genotypes frequencies are\n            and how many different generations to create to see what happens over time\n          </Typography>\n          <Grid item xs={6} className={classes.gridElements}>\n            <Typography variant=\"h5\" gutterBottom>\n              Input Parameters\n            </Typography>\n            <form noValidate autoComplete=\"off\">\n              {Object.keys(populationVariant).map((ty) => {\n                const { title, value, setValue } = populationVariant[ty];\n                return (\n                  <Grid item className={classes.freqInput}>\n                    <FrequencyInput\n                      key={ty}\n                      type={ty}\n                      title={title}\n                      value={value}\n                      setValue={setValue}\n                      isError={isSubmitDisabled}\n                    />\n                  </Grid>\n                );\n              })}\n              <FrequencySlider\n                type=\"generations\"\n                title=\"Number of Generations\"\n                value={generations}\n                step={50}\n                min={100}\n                max={1000}\n                setValue={setGenerations}\n              />\n              <Button variant=\"contained\" color=\"primary\" disabled={isSubmitDisabled()} onClick={runSim}>\n                {buttonText()}\n              </Button>\n            </form>\n          </Grid>\n          <Grid item xs={6} className={classes.gridElements}>\n            <Typography variant=\"h5\" gutterBottom>\n              Output Data\n            </Typography>\n            <DataVis\n              data={conditionData}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}